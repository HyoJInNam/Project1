
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
	float specularPower;
    float4 specularColor;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor = shaderTexture.Sample(SampleType, input.tex);

    float3 lightDir = -lightDirection;
    float lightIntensity = saturate(dot(input.normal, lightDir));
	
    float4 ambient = ambientColor;
	float4 specular = float4 (0.0f, 0.0f, 0.0f, 0.0f);


	if(lightIntensity > 0.0f)
    {
	    ambient += (diffuseColor * lightIntensity);
		ambient = saturate(ambient);
		float3 reflection = normalize(2 * lightIntensity * input.normal - lightDir); 
		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);// * lightIntensity;
	}

    ambient = ambient * textureColor;
    float4 finalColor = saturate(ambient + specular);
    return finalColor;
}