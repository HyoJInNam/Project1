
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
	float specularPower;
    float4 specularColor;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor = shaderTexture.Sample(SampleType, input.tex);

    float3 lightDir = -lightDirection;
	float lightIntensity = saturate(dot(input.normal, lightDir));
	
    float4 ambient = ambientColor;
	float4 specular = float4 (0.0f, 0.0f, 0.0f, 0.0f);
	float4 finalColor = float4(0.0f, 0.0f, 0.0f, 0.0f);

	if(lightIntensity > 0.0f)
    {
	    ambient += (diffuseColor * lightIntensity);
		ambient = saturate(ambient);
		
		float3 reflection = normalize(2 * lightIntensity * input.normal - lightDir); 
		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower) * lightIntensity;

	//=============================================================
   
		float3 lightToPixelVec = input.position.xyz - input.viewDirection.xyz;
		float d = length(lightToPixelVec);

		if( d > 100.0f )
		{
			finalColor.a = textureColor.a;
			//finalColor = pow(saturate(dot(reflection, input.viewDirection)), 1.0f);
			return finalColor;
		}

		lightToPixelVec /= d; 
		float howMuchLight = dot(lightToPixelVec, input.normal);

		if( howMuchLight > 0.0f )
		{    
			finalColor += howMuchLight * textureColor * diffuseColor;
			finalColor = pow(saturate(dot(reflection, input.viewDirection)), 1.0f);
			finalColor /= 0 + (0.2f * d) + (0.1 * (d*d));
        }
	}  
	//=============================================================
	finalColor = ambient * textureColor;
    finalColor = saturate(finalColor + ambient + specular);
    return finalColor;
}