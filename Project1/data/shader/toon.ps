
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
	float specularPower;
    float4 specularColor;
};


struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor = shaderTexture.Sample(SampleType, input.tex);

    float3 lightDir = -lightDirection;
    float lightIntensity = saturate(dot(input.normal, lightDir));
	
	float4 finalColor;
	
    float4 ambient = ambientColor;
	ambient += (ambient * dot(input.normal, lightDir));
	ambient = ceil(ambient * 3) / 3.0f;

	float4 diffuse = diffuseColor;
	diffuse += (diffuse * dot(input.normal, lightDir));
	diffuse = ceil(diffuse * 3) / 3.0f;

	
    finalColor = float4(ambient.xyz * diffuse, 1);
	finalColor = saturate(finalColor* textureColor);
   
    return finalColor;
}
