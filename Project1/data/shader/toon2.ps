

Texture2D shaderTextures[2];
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
};



struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
   	float3 normal : NORMAL;
	float3 tangent : TANGENT;
	float3 binormal : BINORMAL;
	float3 viewDirection : TEXCOORD1;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 BumpMapPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor = shaderTextures[0].Sample(SampleType, input.tex);
    float4 bumpMap = shaderTextures[1].Sample(SampleType, input.tex);
	
    // 정상 값의 범위를 (0, +1)에서 (-1, +1)로 확장합니다.
    bumpMap = (bumpMap * 2.0f) - 1.0f;
    float3 bumpNormal = (bumpMap.x * input.tangent) + (bumpMap.y * input.binormal) + (bumpMap.z * input.normal);
    bumpNormal = normalize(bumpNormal);


    float3 lightDir = -lightDirection;
    float lightIntensity = saturate(dot(bumpNormal, lightDir));
	

	//------------------------------------------------------------------


	float4 finalColor;
	
    float4 ambient = ambientColor;
	ambient += (ambient * dot(input.normal, lightDir));
	ambient = ceil(ambient * 3) / 3.0f;

	float4 diffuse = diffuseColor;
	diffuse += (diffuse * dot(input.normal, lightDir));
	diffuse = ceil(diffuse * 3) / 3.0f;

	
    finalColor = float4(ambient.xyz * diffuse * lightIntensity, 1);
	finalColor = saturate(finalColor * textureColor);
   
    return finalColor;
}
